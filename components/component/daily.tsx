/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/sjhnTZCBkSb
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select"

export function Daily() {
  const [tasks, setTasks] = useState([
    {
      id: 1,
      title: "Finish report for client",
      description: "Compile data and write up the quarterly report",
      category: "Work",
      priority: "high",
      dueDate: "2023-07-15",
      completed: false,
    },
    {
      id: 2,
      title: "Grocery shopping",
      description: "Buy milk, eggs, bread, and other essentials",
      category: "Personal",
      priority: "medium",
      dueDate: "2023-07-12",
      completed: false,
    },
    {
      id: 3,
      title: "Call mom",
      description: "Check in and see how she is doing",
      category: "Personal",
      priority: "low",
      dueDate: "2023-07-10",
      completed: false,
    },
    {
      id: 4,
      title: "Prepare for presentation",
      description: "Finalize slides and practice the presentation",
      category: "Work",
      priority: "high",
      dueDate: "2023-07-20",
      completed: false,
    },
  ])
  const [newTask, setNewTask] = useState({
    title: "",
    description: "",
    category: "",
    priority: "medium",
    dueDate: "",
  })
  const handleAddTask = () => {
    if (newTask.title.trim() !== "") {
      setTasks([
        ...tasks,
        {
          id: tasks.length + 1,
          ...newTask,
          completed: false,
        },
      ])
      setNewTask({
        title: "",
        description: "",
        category: "",
        priority: "medium",
        dueDate: "",
      })
    }
  }
  const handleEditTask = (id, updates) => {
    setTasks(tasks.map((task) => (task.id === id ? { ...task, ...updates } : task)))
  }
  const handleCompleteTask = (id) => {
    setTasks(tasks.map((task) => (task.id === id ? { ...task, completed: !task.completed } : task)))
  }
  const handleDragEnd = (result) => {
    if (!result.destination) return
    const items = Array.from(tasks)
    const [reorderedItem] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, reorderedItem)
    setTasks(items)
  }
  return (
    <div className="flex min-h-screen flex-col bg-background text-foreground">
      <header className="sticky top-0 z-10 border-b bg-background py-4 shadow">
        <div className="container mx-auto flex items-center justify-between px-4 md:px-6">
          <h1 className="text-2xl font-bold">Daily Tasks</h1>
          <div className="flex items-center gap-4">
            <Button onClick={handleAddTask} className="rounded-md px-4 py-2 text-sm font-medium">
              Add Task
            </Button>
            <Avatar>
              <AvatarImage src="/placeholder-user.jpg" />
              <AvatarFallback>JD</AvatarFallback>
            </Avatar>
          </div>
        </div>
      </header>
      <main className="container mx-auto flex-1 px-4 py-8 md:px-6">
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          <div className="rounded-lg border border-muted bg-background p-4 shadow">
            <h2 className="mb-4 text-lg font-bold">To Do</h2>
            <div>
              <div>
                {(provided) => (
                  <div {...provided.droppableProps} ref={provided.innerRef} className="space-y-4">
                    {tasks
                      .filter((task) => !task.completed)
                      .map((task, index) => (
                        <Draggable key={task.id} draggableId={task.id.toString()} index={index}>
                          {(provided) => (
                            <div
                              ref={provided.innerRef}
                              {...provided.draggableProps}
                              {...provided.dragHandleProps}
                              className={`rounded-lg border transition-colors ${
                                task.priority === "high"
                                  ? "border-red-500"
                                  : task.priority === "medium"
                                  ? "border-yellow-500"
                                  : "border-green-500"
                              } bg-background p-4 shadow`}
                            >
                              <div className="flex items-center justify-between">
                                <div>
                                  <h3 className="text-lg font-medium">{task.title}</h3>
                                  <p className="text-sm text-muted-foreground">{task.description}</p>
                                </div>
                                <div className="flex items-center gap-2">
                                  <Button
                                    variant="ghost"
                                    size="icon"
                                    onClick={() =>
                                      handleEditTask(task.id, {
                                        completed: !task.completed,
                                      })
                                    }
                                  >
                                    {task.completed ? (
                                      <Icon prompt="Check" className="h-5 w-5" />
                                    ) : (
                                      <Icon prompt="Circle" className="h-5 w-5" />
                                    )}
                                  </Button>
                                  <DropdownMenu>
                                    <DropdownMenuTrigger asChild>
                                      <Button variant="ghost" size="icon" className="rounded-full">
                                        <Icon prompt="More horizontal" className="h-5 w-5" />
                                      </Button>
                                    </DropdownMenuTrigger>
                                    <DropdownMenuContent align="end">
                                      <DropdownMenuItem
                                        onClick={() =>
                                          handleEditTask(task.id, {
                                            priority:
                                              task.priority === "high"
                                                ? "medium"
                                                : task.priority === "medium"
                                                ? "low"
                                                : "high",
                                          })
                                        }
                                      >
                                        {task.priority === "high"
                                          ? "Set Medium Priority"
                                          : task.priority === "medium"
                                          ? "Set Low Priority"
                                          : "Set High Priority"}
                                      </DropdownMenuItem>
                                      <DropdownMenuItem
                                        onClick={() =>
                                          handleEditTask(task.id, {
                                            category: task.category === "Work" ? "Personal" : "Work",
                                          })
                                        }
                                      >
                                        {task.category === "Work" ? "Move to Personal" : "Move to Work"}
                                      </DropdownMenuItem>
                                      <DropdownMenuItem
                                        onClick={() =>
                                          handleEditTask(task.id, {
                                            title: prompt("Enter new task title:"),
                                            description: prompt("Enter new task description:"),
                                          })
                                        }
                                      >
                                        Edit Task
                                      </DropdownMenuItem>
                                    </DropdownMenuContent>
                                  </DropdownMenu>
                                </div>
                              </div>
                              <div className="mt-2 flex items-center justify-between">
                                <div className="flex items-center gap-2 text-sm text-muted-foreground">
                                  <Icon prompt="Calendar" className="h-4 w-4" />
                                  <span>{new Date(task.dueDate).toLocaleDateString()}</span>
                                </div>
                                <div
                                  className={`rounded-full px-2 py-1 text-xs font-medium ${
                                    task.priority === "high"
                                      ? "bg-red-500 text-red-50"
                                      : task.priority === "medium"
                                      ? "bg-yellow-500 text-yellow-50"
                                      : "bg-green-500 text-green-50"
                                  }`}
                                >
                                  {task.priority}
                                </div>
                              </div>
                            </div>
                          )}
                        </Draggable>
                      ))}
                    {provided.placeholder}
                  </div>
                )}
              </div>
            </div>
          </div>
          <div className="rounded-lg border border-muted bg-background p-4 shadow">
            <h2 className="mb-4 text-lg font-bold">Completed</h2>
            <div className="space-y-4">
              {tasks
                .filter((task) => task.completed)
                .map((task) => (
                  <div key={task.id} className="rounded-lg border border-green-500 bg-background p-4 shadow">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-lg font-medium line-through">{task.title}</h3>
                        <p className="text-sm text-muted-foreground">{task.description}</p>
                      </div>
                      <Button variant="ghost" size="icon" onClick={() => handleCompleteTask(task.id)}>
                        <CheckIcon className="h-5 w-5" />
                      </Button>
                    </div>
                    <div className="mt-2 flex items-center justify-between">
                      <div className="flex items-center gap-2 text-sm text-muted-foreground">
                        <CalendarIcon className="h-4 w-4" />
                        <span>{new Date(task.dueDate).toLocaleDateString()}</span>
                      </div>
                      <div
                        className={`rounded-full px-2 py-1 text-xs font-medium ${
                          task.priority === "high"
                            ? "bg-red-500 text-red-50"
                            : task.priority === "medium"
                            ? "bg-yellow-500 text-yellow-50"
                            : "bg-green-500 text-green-50"
                        }`}
                      >
                        {task.priority}
                      </div>
                    </div>
                  </div>
                ))}
            </div>
          </div>
          <div className="rounded-lg border border-muted bg-background p-4 shadow">
            <h2 className="mb-4 text-lg font-bold">Add New Task</h2>
            <div className="space-y-4">
              <Input
                placeholder="Task Title"
                value={newTask.title}
                onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}
              />
              <Textarea
                placeholder="Task Description"
                value={newTask.description}
                onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}
              />
              <div className="flex items-center justify-between">
                <Select value={newTask.category} onValueChange={(value) => setNewTask({ ...newTask, category: value })}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select Category" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Work">Work</SelectItem>
                    <SelectItem value="Personal">Personal</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={newTask.priority} onValueChange={(value) => setNewTask({ ...newTask, priority: value })}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select Priority" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="high">High</SelectItem>
                    <SelectItem value="medium">Medium</SelectItem>
                    <SelectItem value="low">Low</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <Input
                type="date"
                value={newTask.dueDate}
                onChange={(e) => setNewTask({ ...newTask, dueDate: e.target.value })}
              />
              <Button onClick={handleAddTask} className="w-full rounded-md px-4 py-2 text-sm font-medium">
                Add Task
              </Button>
            </div>
          </div>
        </div>
      </main>
    </div>
  )
}

function CalendarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
    </svg>
  )
}


function CheckIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 6 9 17l-5-5" />
    </svg>
  )
}
